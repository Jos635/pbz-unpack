using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Ionic.Zip;
using System.IO;
using Newtonsoft.Json;

namespace Pbz_extractor
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        static string _selectedFile = "";
        static string selectedFile
        {
            get
            {
                return _selectedFile;
            }
            set
            {
                Console.WriteLine("Selected '{0}'", value);
                _selectedFile = value;
            }
        }
        static string output_path
        {
            get
            {
                return Path.GetFullPath(Path.GetDirectoryName(selectedFile) + "\\Extracted_" + Path.GetFileNameWithoutExtension(selectedFile) + "\\");
            }
        }

        [STAThread]
        static void Main(string[] args)
        {
#if !DEBUG
            //Non-debug warning
            Console.WriteLine(new string('#', 80));
            Console.WriteLine("WARNING: You could easily destroy your watch by installing a watchface generated by this program. Use at your own risk.");
            Console.WriteLine("\nPress a key to continue.");
            Console.WriteLine();
            Console.WriteLine(new string('#', 80));
            Console.ReadKey();
#else
            //Debug
            if (args.Length == 0)
            {
                args = new string[] { "simplicity.pbw" };
            }
#endif

            foreach (string file in args)
            {
                ExtractFile(file);
            }

            PrintHelp();
            while (true)
            {
                Console.WriteLine();

                string line = Console.ReadLine();
                string command = line.Split(' ')[0];
                string argument = line.Replace(command + " ", "").Trim('"', ' ');
                
                switch (command)
                {
                    case "help":
                        PrintHelp();
                        break;
                    case "select":
                        if (File.Exists(argument))
                        {
                            if (Path.GetExtension(argument) == ".pbz" || Path.GetExtension(argument) == ".pbw")
                            {
                                selectedFile = argument;
                            }
                            else
                            {
                                Console.WriteLine("Error: not a pebble file");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Error: no such file");
                        }
                        break;
                    case "extract":
                    case "unpack":
                        ExtractFile(selectedFile);
                        Console.WriteLine("File extracted to '{0}'", output_path);
                        break;
                    case "rebuild":
                    case "repack":
                        RebuildFile(selectedFile);
                        break;
                    default:
                        Console.WriteLine("No such command");
                        break;
                }
            }
        }

        public static void RebuildFile(string file)
        {
            Console.WriteLine(new string('#', 80));

            string manifest = File.ReadAllText(output_path + "manifest.json");
            JsonSerializerSettings s = new JsonSerializerSettings();
            PebbleManifest m = (PebbleManifest)JsonConvert.DeserializeObject(manifest, typeof(PebbleManifest), s);

            m.Print();

            string bin_file = Directory.GetFiles(output_path, "*.bin")[0];
            string pbpack_file = Directory.GetFiles(output_path, "*.pbpack")[0];

            AppBinary a = new AppBinary(bin_file);

            //Rebuild all pbpack files
            foreach (string f in Directory.GetFiles(output_path, "*.pbpack"))
            {
                PbPack p = new PbPack(f);
                string directory = output_path + Path.GetFileNameWithoutExtension(f) + "\\";
                if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);
                p.Load(directory, m.debug.resourceMap);

                //Rebuilds .pbpack file, updates manifest & updates bin file
                p.Intract(directory, m.debug.resourceMap, a);
            }

            //Update json file with new CRC's and file sizes

            if (m.firmware == null)
            {
                m.application.crc = (uint)Crc.crc32(File.ReadAllBytes(bin_file));
            }
            else
            {
                Console.WriteLine("Repacking firmware not implemented....");
            }

            m.resources.crc = (uint)Crc.crc32(File.ReadAllBytes(pbpack_file));

            File.WriteAllText(output_path + "new_manifest.json", JsonConvert.SerializeObject(m).Replace("\"firmware\":null,", ""));

            a.Save();

            //Build zip
            List<string> files = new List<string>();
            files.AddRange(Directory.GetFiles(output_path, "*.pbpack"));
            files.AddRange(Directory.GetFiles(output_path, "*.bin"));
            files.AddRange(Directory.GetFiles(output_path, "*.json"));

            if(File.Exists(file)) File.Delete(file);
            using (ZipFile z = new ZipFile(file))
            {
                
                foreach (string f in files)
                {
                    z.AddFile(f, "");
                }
                z.Save();
            }
        }

        public static void ExtractFile(string file)
        {
            Console.WriteLine(new string('#', 80));
            Console.WriteLine("[PBZ] Extracting '{0}'\n", file);
            selectedFile = file;
            /*int i = 0;
            while (Directory.Exists(output_path))
            {
                output_path = Path.GetFullPath("Extracted_" + Path.GetFileNameWithoutExtension(file) + "_" + i + "\\");
                i++;
            }*/
            if (!Directory.Exists(output_path))
            {
                Console.WriteLine("Extracting ZIP {0} to {1}", file, output_path);

                using (ZipFile f = new ZipFile(file))
                {
                    foreach (ZipEntry e in f.Entries)
                    {
                        e.Extract(output_path);
                    }
                }
            }

            string manifest = File.ReadAllText(output_path + "manifest.json");
            JsonSerializerSettings s = new JsonSerializerSettings();
            PebbleManifest m = (PebbleManifest)JsonConvert.DeserializeObject(manifest, typeof(PebbleManifest), s);

            m.Print();
            //Console.ReadKey();

            foreach (string f in Directory.GetFiles(output_path, "*.pbpack"))
            {
                PbPack p = new PbPack(f);
                string directory = output_path + Path.GetFileNameWithoutExtension(f) + "\\";
                if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);
                p.Load(directory, m.debug.resourceMap);
                p.Extract(directory, m.debug.resourceMap);
            }

            if (m.firmware == null)
            {
                foreach (string f in Directory.GetFiles(output_path, "*.bin"))
                {
                    AppBinary b = new AppBinary(f);
                    b.Print();
                }
            }

            Console.WriteLine("\n[PBZ] Done extracting\n");
        }

        public static void PrintHelp()
        {
            Console.WriteLine("==== Command List ====");
            Console.WriteLine("help - Show this text");
            Console.WriteLine("select - Select a specific file to manipulate");
            Console.WriteLine("unpack - Extracts the selected file");
            Console.WriteLine("repack - Rebuilds the selected file");
            Console.WriteLine();
        }
    }
}
